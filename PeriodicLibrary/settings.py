"""
Django settings for PeriodicLibrary project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
import mimetypes
from django.utils.translation import gettext_lazy as _


mimetypes.add_type("application/javascript", ".js", True)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^kms!wbc&2+2(^719-jp+$%vj9^4t@$y=ecfo^k509se+ktm$v'

# SECURITY WARNING: don't run with debug turned on in production!
SITE_NAME = os.environ.get('DJANGO_SITE', '127.0.0.1')

ENV_DEBUG = os.environ.get('DJANGO_DEBUG', 'True')
if ENV_DEBUG == 'True':
    DEBUG = True
    ALLOWED_HOSTS = [SITE_NAME, 'www.{0}'.format(SITE_NAME)]
elif ENV_DEBUG == 'False':
    DEBUG = False
    ALLOWED_HOSTS = [SITE_NAME, 'www.{0}'.format(SITE_NAME)]
    CSRF_TRUSTED_ORIGINS = ['http://*.{0}'.format(SITE_NAME), ]
else:
    raise _('The DJANGO_DEBUG environment variable has an incorrect value.')
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'library',
    'taggit',
    'taggit_labels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PeriodicLibrary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PeriodicLibrary.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
ENV_SQLITE = os.environ.get('DB_SQLITE', 'True')
if ENV_SQLITE == 'True':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif ENV_SQLITE == 'False':
    db_name = os.environ.get('DB_NAME', 'PeriodicLibrary')
    user = os.environ.get('DB_USER', 'user')
    pswd = os.environ.get('DB_PASS', 'password')
    host = os.environ.get('DB_HOST', '127.0.0.1')
    port = os.environ.get('DB_PORT', 5432)
    if db_name and user and pswd and host and isinstance(port, int):
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': db_name,
                'USER': user,
                'PASSWORD': pswd,
                'HOST': host,
                'PORT': int(port),
            }
        }
    else:
        raise _('The environment variables for connecting to the database are incorrect.')
else:
    print(ENV_SQLITE)
    raise _('The DB_SQLITE environment variable has an incorrect value.')

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru'  # 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
